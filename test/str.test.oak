std := import('std')
str := import('str')
fmt := import('fmt')

fn run(t) {
	// character range checks: upper, lower, digit, space, letter, word
	{
		{
			upper?: upper?
			lower?: lower?
			upper: upper
			lower: lower
			digit?: digit?
			space?: space?
			letter?: letter?
			word?: word?
		} := str

		'upper? = true for all uppercase' |> t.eq(
			std.range(codepoint('A'), codepoint('Z') + 1) |>
				std.map(char) |> std.every(upper?)
			true
		)
		'upper? = false for all lowercase' |> t.eq(
			std.range(codepoint('a'), codepoint('z') + 1) |>
				std.map(char) |> std.some(upper?)
			false
		)
		'lower? = true for all lowercase' |> t.eq(
			std.range(codepoint('a'), codepoint('z') + 1) |>
				std.map(char) |> std.every(lower?)
			true
		)
		'lower? = false for all uppercase' |> t.eq(
			std.range(codepoint('A'), codepoint('Z') + 1) |>
				std.map(char) |> std.some(lower?)
			false
		)

		'upper transforms only lowercase chars' |> t.eq(
			upper('Sequenced Tasks 123')
			'SEQUENCED TASKS 123'
		)
		'lower transforms only uppercase chars' |> t.eq(
			lower('Sequenced Tasks 123')
			'sequenced tasks 123'
		)

		'digit? = true for all digits' |> t.eq(
			std.range(codepoint('0'), codepoint('9') + 1) |>
				std.map(char) |> std.every(digit?)
			true
		)
		'digit? = false for non-digits' |> t.eq(
			['A', 'z', '-', '.', '?'] |> std.some(digit?)
			false
		)
		'space? = true for whitespace' |> t.eq(
			[' ', '\n', '\t', '\r', '\f'] |> std.every(space?)
			true
		)
		'space? = false for non-whitespace' |> t.eq(
			['A', 'z', '-', '.', '?', '0'] |> std.some(space?)
			false
		)
		'letter? = true for all letters' |> t.eq(
			['A', 'z'] |> std.every(letter?)
			true
		)
		'letter? = false for non-letters' |> t.eq(
			['0', '-', ' '] |> std.some(letter?)
			false
		)
		'word? = true for all letters and numbers' |> t.eq(
			['A', 'z', '0'] |> std.every(word?)
			true
		)
		'letter? = false for non-letters' |> t.eq(
			['-', ' '] |> std.some(word?)
			false
		)
	}

	// join
	{
		join := str.join

		'join empty list' |> t.eq(
			[] |> join(', ')
			''
		)
		'join list with no joiner' |> t.eq(
			['cat', 'dog', 'horse'] |> join()
			'catdoghorse'
		)
		'join list with empty string' |> t.eq(
			['cat', 'dog', 'horse'] |> join('')
			'catdoghorse'
		)
		'join list with string' |> t.eq(
			['cat', 'dog', 'horse'] |> join(', ')
			'cat, dog, horse'
		)
	}

	// startsWith? and endsWith?
	{
		{
			startsWith?: startsWith?
			endsWith?: endsWith?
		} := str

		'empty string |> startsWith?(empty string)' |> t.eq(
			'' |> startsWith?('')
			true
		)
		'empty string |> startsWith?(non-empty string)' |> t.eq(
			'' |> startsWith?('Hello')
			false
		)
		'startsWith?(empty string)' |> t.eq(
			'Hello' |> startsWith?('')
			true
		)
		'startsWith?(non-empty string)' |> t.eq(
			'Hello' |> startsWith?('Hel')
			true
		)
		'startsWith?(incorrect prefix)' |> t.eq(
			'Hello' |> startsWith?('Helo')
			false
		)
		'startsWith?(string itself)' |> t.eq(
			'Hello' |> startsWith?('Hello')
			true
		)
		'startsWith?(prefix longer than string)' |> t.eq(
			'Hello' |> startsWith?('Hello World!')
			false
		)

		'empty string |> endsWith?(empty string)' |> t.eq(
			'' |> endsWith?('')
			true
		)
		'empty string |> endsWith?(non-empty string)' |> t.eq(
			'' |> endsWith?('Hello')
			false
		)
		'endsWith?(empty string)' |> t.eq(
			'Hello' |> endsWith?('')
			true
		)
		'endsWith?(non-empty string)' |> t.eq(
			'Hello' |> endsWith?('llo')
			true
		)
		'endsWith?(incorrect suffix)' |> t.eq(
			'Hello' |> endsWith?('elo')
			false
		)
		'endsWith?(string itself)' |> t.eq(
			'Hello' |> endsWith?('Hello')
			true
		)
		'endsWith?(suffix longer than string)' |> t.eq(
			'Hello' |> endsWith?('Oak says Hello')
			false
		)
	}

	// indexOf, contains?, cut
	{
		{
			indexOf: indexOf
			contains?: contains?
			cut: cut
		} := str

		'indexOf empty string' |> t.eq(indexOf('', 'a'), -1)
		'indexOf nonexistent part' |> t.eq(indexOf('abc', 'x'), -1)
		'indexOf existent part' |> t.eq(indexOf('abc', 'b'), 1)
		'indexOf duplicate part' |> t.eq(indexOf('abcdc', 'c'), 2)

		'contains? empty string' |> t.eq(contains?('', 'a'), false)
		'contains? nonexistent part' |> t.eq(contains?('abc', 'x'), false)
		'contains? existent part' |> t.eq(contains?('abc', 'b'), true)
		'contains? duplicate part' |> t.eq(contains?('abcdc', 'c'), true)

		'cut empty string' |> t.eq(
			cut('', '=')
			['', '']
		)
		'cut string with no separator' |> t.eq(
			cut('param-value', '=')
			['param-value', '']
		)
		'cut string by separator' |> t.eq(
			cut('param=value', '=')
			['param', 'value']
		)
		'cut string only by first separator' |> t.eq(
			cut('param=value=answer', '=')
			['param', 'value=answer']
		)
		'cut string by multi-char separator' |> t.eq(
			cut('param%20value', '%20')
			['param', 'value']
		)
		'cut string only by first multi-char separator' |> t.eq(
			cut('param%20value%20answer', '%20')
			['param', 'value%20answer']
		)
		'cut string by separator at start of string' |> t.eq(
			cut('===back', '==')
			['', '=back']
		)
		'cut string by separator at end of string' |> t.eq(
			cut('front==', '==')
			['front', '']
		)
	}

	// replace, split
	{
		{
			replace: replace
			split: split
		} := str

		'replace is no-op if empty string' |> t.eq(
			replace('he stared in amazement', '', '__')
			'he stared in amazement'
		)
		'replace replaces all instances of given substring' |> t.eq(
			replace('he stared in amazement', 'e', 'j')
			'hj starjd in amazjmjnt'
		)
		'replace works for multi-character substring' |> t.eq(
			replace('he is staring in amazement', 'in', 'xx')
			'he is starxxg xx amazement'
		)
		'replace accounts for different old/new substring lengths' |> t.eq(
			replace('he is staring in amazement', 'in', 'wonder')
			'he is starwonderg wonder amazement'
		)
		'replace deals gracefully with overlapping matches' |> t.eq(
			replace('wow what a sight, wow', 'ow', 'wow')
			'wwow what a sight, wwow'
		)
		'replace works if new substring is empty' |> t.eq(
			replace('wow what a sight, wow', 'wow', '')
			' what a sight, '
		)
		'replace works even if new str contains recursive match' |> t.eq(
			replace('a {} b {} c {}', '{}', '{}-{}')
			'a {}-{} b {}-{} c {}-{}'
		)

		'split splits string into letters if ?' |> t.eq(
			split('alphabet')
			['a', 'l', 'p', 'h', 'a', 'b', 'e', 't']
		)
		'split splits string into letters if empty' |> t.eq(
			split('alphabet', '')
			['a', 'l', 'p', 'h', 'a', 'b', 'e', 't']
		)
		'split splits string by delimiter' |> t.eq(
			split('shoots, eats, and leaves', ', ')
			['shoots', 'eats', 'and leaves']
		)
		'split with empty strings if delimiter in start or end' |> t.eq(
			split(', original taste, ', ', ')
			['', 'original taste', '']
		)
		'returns one chunk if no match of delimiter found' |> t.eq(
			split('no taste whatsoever!', 'grand')
			['no taste whatsoever!']
		)
	}

	// padStart, padEnd
	{
		{
			padStart: padStart
			padEnd: padEnd
		} := str

		'padStart a string which is too long' |> t.eq(
			padStart('1234567890', 5, '-')
			'1234567890'
		)
		'padStart pads a string with single char' |> t.eq(
			padStart('123', 5, '-')
			'--123'
		)
		'padStart with multi-char pad' |> t.eq(
			padStart('1234', 10, 'abc')
			'abcabc1234'
		)
		'padStart requiring partial padding < 1' |> t.eq(
			padStart('123', 10, 'abcd')
			'abcdabc123'
		)
		'padStart requiring partial padding > 1' |> t.eq(
			padStart('12345', 10, 'abcdefghijk')
			'abcde12345'
		)

		'padEnd a string which is too long' |> t.eq(
			padEnd('1234567890', 5, '-')
			'1234567890'
		)
		'padEnd pads a string with single char' |> t.eq(
			padEnd('123', 5, '-')
			'123--'
		)
		'padEnd with multi-char pad' |> t.eq(
			padEnd('1234', 10, 'abc')
			'1234abcabc'
		)
		'padEnd requiring partial padding < 1' |> t.eq(
			padEnd('123', 10, 'abcd')
			'123abcdabc'
		)
		'padEnd requiring partial padding > 1' |> t.eq(
			padEnd('12345', 10, 'abcdefghijk')
			'12345abcde'
		)
	}

	// trimStart, trimEnd, trim
	{
		{
			trimStart: trimStart
			trimEnd: trimEnd
			trim: trim
		} := str

		'trimStart is a no-op with empty string' |> t.eq(
			trimStart('???????what???', '')
			'???????what???'
		)
		'trimStart trims given prefix until it does not prefix' |> t.eq(
			trimStart('???????what???', '?')
			'what???'
		)
		'trimStart works with multi-char prefix' |> t.eq(
			trimStart('abababacdef', 'ab')
			'acdef'
		)
		'trimStart only trims whole multiples of prefix' |> t.eq(
			trimStart('aaaaaaaadef', 'aaa')
			'aadef'
		)

		'trimEnd is a no-op with empty string' |> t.eq(
			trimEnd('???????what???', '')
			'???????what???'
		)
		'trimEnd trims given suffix until it does not suffix' |> t.eq(
			trimEnd('???????what???', '?')
			'???????what'
		)
		'trimEnd works with multi-char suffix' |> t.eq(
			trimEnd('abacdefabcabab', 'ab')
			'abacdefabc'
		)
		'trimEnd only trims whole multiples of suffix' |> t.eq(
			trimEnd('xxxyyyyyyyy', 'yyy')
			'xxxyy'
		)

		'trim trims given string from both sides' |> t.eq(
			trim('????what?????', '?')
			'what'
		)
		'trim is a no-op with empty string' |> t.eq(
			trim('????what?????', '')
			'????what?????'
		)
		'trim trims whole multiples of substring from both sides' |> t.eq(
			trim('????what?????', '???')
			'?what??'
		)
		'trim trims whitespace on both sides if no delimiter' |> t.eq(
			trim('   \t\nhello world!   \n\t   ')
			'hello world!'
		)
	}
}

