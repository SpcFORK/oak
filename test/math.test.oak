std := import('std')
math := import('math')
fmt := import('fmt')

fn run(t) {
	// sign, abs
	{
		{
			sign: sign
			abs: abs
		} := math

		'sign of 0 and positive numbers' |> t.eq(
			[1, 2, 10, 1000] |> std.map(sign)
			[1, 1, 1, 1]
		)
		'sign of negative numbers' |> t.eq(
			[-1, -2, -10, -1000] |> std.map(sign)
			[-1, -1, -1, -1]
		)

		'absolute value of numbers' |> t.eq(
			[-1000, -10, -2, 1, 0, 1, 2, 10, 1000] |> std.map(abs)
			[1000, 10, 2, 1, 0, 1, 2, 10, 1000]
		)
	}

	// sqrt, hypot
	{
		{
			sqrt: sqrt
			hypot: hypot
		} := math

		'sqrt(0)' |> t.eq(sqrt(0), 0)
		'sqrt(1)' |> t.eq(sqrt(1), 1)
		'sqrt(negative number)' |> t.eq(sqrt(-10), ?)
		[2, 10, 100, 225, 1000] |> with std.each() fn(n) {
			'sqrt({{0}}) <> pow({{0}}, 0.5)' |> fmt.format(n) |>
				t.approx(sqrt(n), pow(n, 0.5))
		}

		Triples := [
			[0, 0, 0]
			[3, 4, 5]
			[5, 12, 13]
		]

		// single-point
		Triples |> with std.each() fn(pt) {
			[a, b, c] := pt

			'hypot({{0}}, {{1}}) = {{2}}' |>
				fmt.format(pt...) |>
				t.approx(hypot(a, b), c)

			'hypot(-{{0}}, -{{1}}) = {{2}}' |>
				fmt.format(pt...) |>
				t.approx(hypot(-a, -b), c)
		}

		// double-point
		Triples |> with std.each() fn(pt) {
			[a0, b0] := [-2, -4]
			[a, b, c] := pt

			'hypot({{0}}, {{1}}, {{2}}, {{3}}) = {{4}}' |>
				fmt.format(a0, b0, a0 + a, b0 + b, c) |>
				t.approx(hypot(a0, b0, a0 + a, b0 + b), c)

			'hypot({{0}}, {{1}}, {{2}}, {{3}}) = {{4}}' |>
				fmt.format(a0, b0, a0 - a, b0 - b, c) |>
				t.approx(hypot(a0, b0, a0 - a, b0 - b), c)
		}
	}

	// scale
	{
		{ scale: scale } := math

		'scale <min to [0, 1]' |> t.eq(scale(-10, 0, 10), -1)
		'scale min to [0, 1]' |> t.eq(scale(0, 0, 10), 0)
		'scale max to [0, 1]' |> t.eq(scale(10, 0, 10), 1)
		'scale mid to [0, 1]' |> t.eq(scale(5, 0, 10), 0.5)
		'scale >max to [0, 1]' |> t.eq(scale(20, 0, 10), 2)

		'scale <min to [0, 1] in range < 0' |> t.eq(scale(10, 0, -10), -1)
		'scale min to [0, 1] in range < 0' |> t.eq(scale(0, 0, -10), 0)
		'scale max to [0, 1] in range < 0' |> t.eq(scale(-10, 0, -10), 1)
		'scale mid to [0, 1] in range < 0' |> t.eq(scale(-5, 0, -10), 0.5)
		'scale >max to [0, 1] in range < 0' |> t.eq(scale(-20, 0, -10), 2)

		'scale <min to [50, 100]' |> t.eq(scale(-10, 0, 10, 50, 100), 0)
		'scale min to [50, 100]' |> t.eq(scale(0, 0, 10, 50, 100), 50)
		'scale max to [50, 100]' |> t.eq(scale(10, 0, 10, 50, 100), 100)
		'scale mid to [50, 100]' |> t.eq(scale(5, 0, 10, 50, 100), 75)
		'scale >max to [50, 100]' |> t.eq(scale(20, 0, 10, 50, 100), 150)

		'scale <min to [-50, -100]' |> t.eq(scale(-10, 0, 10, -50, -100), 0)
		'scale min to [-50, -100]' |> t.eq(scale(0, 0, 10, -50, -100), -50)
		'scale max to [-50, -100]' |> t.eq(scale(10, 0, 10, -50, -100), -100)
		'scale mid to [-50, -100]' |> t.eq(scale(5, 0, 10, -50, -100), -75)
		'scale >max to [-50, -100]' |> t.eq(scale(20, 0, 10, -50, -100), -150)

		'scale to 0' |> t.eq(scale(7, 0, 10, 0, 0), 0)
		'scale to singularity' |> t.eq(scale(7, 0, 10, 12, 12), 12)
	}

	// bearing, orient
	{
		{
			bearing: bearing
			orient: orient
		} := math

		fn angle(t) t * math.Pi / 180

		[
			['east', 0, [10, 0]]
			['north', 90, [0, 10]]
			['west', 180, [-10, 0]]
			['south', -90, [0, -10]]
			['30deg', 30, [8.66025403, 5]]
			['60deg', 60, [5, 8.66025403]]
		] |> with std.each() fn(spec) {
			[dir, th, pt] := spec
			[px, py] := pt

			[
				[0, 0]
				[2, 5]
				[-2, 5]
				[-2, -5]
			] |> with std.each() fn(origin) {
				[ox, oy] := origin
				'bearing {{0}} from ({{1}}, {{2}})' |>
					fmt.format(dir, ox, oy) |>
					t.approx(bearing(ox, oy, 10, angle(th)), [ox + px, oy + py])
			}
		}
	}

	// sum, prod
	{
		{
			sum: sum
			prod: prod
		} := math

		'sum of nothing' |> t.eq(sum(), 0)
		'sum of 1' |> t.eq(sum(42), 42)
		'sum of many' |> t.eq(sum(std.range(100)...), 4950)

		'prod of nothing' |> t.eq(prod(), 1)
		'prod of 1' |> t.eq(prod(42), 42)
		'prod of many' |> t.eq(prod(std.range(1, 11)...), 3628800)
	}

	// min, max
	{
		{
			min: min
			max: max
		} := math

		'min of empty' |> t.eq(min(), ?)
		'max of empty' |> t.eq(max(), ?)

		'min of list of 1' |> t.eq(min(-30), -30)
		'max of list of 1' |> t.eq(max(100), 100)

		list := [39, 254, 5, -2, 0, 3]
		'min of list' |> t.eq(min(list...), -2)
		'max of list' |> t.eq(max(list...), 254)

		same := std.range(10) |> std.map(fn 2)
		'min of same' |> t.eq(min(same...), 2)
		'max of same' |> t.eq(max(same...), 2)
	}

	// rounding
	{
		{
			round: round
		} := math

		'round 0' |> t.eq(round(0), 0.0)
		[2, 100, -49] |> with std.each() fn(n) {
			fmt.format('round integer {{0}}', n) |> t.eq(
				round(n)
				float(n)
			)
		}

		// table test
		decimals := [-5, 0, 1, 2, 4, 10]
		[
			[2.5, [2.5, 3.0, 2.5, 2.5, 2.5, 2.5]]
			[-2.5, [-2.5, -3.0, -2.5, -2.5, -2.5, -2.5]]
			[3.141592, [3.141592, 3.0, 3.1, 3.14, 3.1416, 3.141592]]
			[0.0021828, [0.0021828, 0.0, 0.0, 0.0, 0.0022, 0.0021828]]
			[-694.20108, [-694.20108, -694.0, -694.2, -694.2, -694.2011, -694.20108]]
		] |> with std.each() fn(spec) {
			[value, results] := spec
			results |> with std.each() fn(result, i) {
				decimal := decimals.(i)
				fmt.format('round {{0}} to {{1}} places => {{2}}', value, decimal, result) |> t.eq(
					round(value, decimal)
					result
				)
			}
		}
	}
}

