std := import('std')
fmt := import('fmt')
json := import('json')

fn run(t) {
	// serialize
	{
		ser := json.serialize

		'null' |> t.eq(
			ser(?)
			'null'
		)
		'empty' |> t.eq(
			ser(_)
			'null'
		)
		'empty string' |> t.eq(
			ser('')
			'""'
		)
		'ordinary string' |> t.eq(
			ser('world')
			'"world"'
		)
		'string with escapes' |> t.eq(
			ser('es"c \\a"pe\nme\t')
			'"es\\"c \\\\a\\"pe\\nme\\t"'
		)
		'atoms' |> t.eq(
			ser(':_atom_THIS')
			'":_atom_THIS"'
		)
		'true' |> t.eq(
			ser(true)
			'true'
		)
		'false' |> t.eq(
			ser(false)
			'false'
		)
		'integer' |> t.eq(
			ser(12)
			'12'
		)
		'decimal number' |> t.eq(
			ser(3.14)
			'3.14'
		)
		'negative number' |> t.eq(
			ser(-2.4142)
			'-2.4142'
		)
		'function => null' |> t.eq(
			ser(fn {})
			'null'
		)
		'empty list' |> t.eq(
			ser([])
			'[]'
		)
		'empty object' |> t.eq(
			ser({})
			'{}'
		)
		'ordinary list' |> t.eq(
			ser([10, 20, 1, 0, 'hi', :zero])
			'[10,20,1,0,"hi","zero"]'
		)
		'nested list' |> t.eq(
			ser([10, [20, 30], [?, _], []])
			'[10,[20,30],[null,null],[]]'
		)
		'ordinary object' |> t.assert(
			[
				// object keys, and hence serialized JSON keys, are not
				// guaranteed to be in a deterministic order
				'{"cd":-4.251,"a":"b"}'
				'{"a":"b","cd":-4.251}'
			] |> std.contains?(ser({ a: 'b', cd: -4.251 }))
		)
		'nested object' |> t.assert(
			{
				serialized := ser([
					'a'
					true
					{ c: 'd', 'e"': 32.14 }
					['f', {}, ?, -42]
				])
				[
					'["a",true,{"c":"d","e\\"":32.14},["f",{},null,-42]]'
					'["a",true,{"e\\"":32.14,"c":"d"},["f",{},null,-42]]'
				] |> std.contains?(serialized)
			}
		)
	}

	// parse
	{
		p := json.parse

		'empty string or whitespace' |> t.eq(
			['', '\n', '  \t  '] |> std.map(p)
			[:error, :error, :error]
		)
		'null, true, false' |> t.eq(
			['null', 'true', 'false'] |> std.map(p)
			[?, true, false]
		)
		'invalid JSON, nearly-keywords' |> t.eq(
			['nul', 'truu', 'fals   '] |> std.map(p)
			[:error, :error, :error]
		)
		'empty string' |> t.eq(
			p('""')
			''
		)
		'ordinary string' |> t.eq(
			p('"thing 1 thing 2"')
			'thing 1 thing 2'
		)
		'escaped string' |> t.eq(
			p('"es\\"c \\\\a\\"pe\\nme\\t"')
			'es"c \\a"pe\nme\t'
		)
		'interrupted string' |> t.eq(
			p('"my"what"')
			'my'
		)
		'ordinary number' |> t.eq(
			p('420')
			420
		)
		'negative number' |> t.eq(
			p('-69')
			-69
		)
		'decimal number' |> t.eq(
			p('-59.413')
			-59.413
		)
		'interrupted number' |> t.eq(
			p('10.1-2')
			10.1
		)
		'invalid number' |> t.eq(
			p('1.2.3')
			:error
		)
		'empty list' |> t.eq(
			['[]', '[\n]', '[    ]'] |> std.map(p)
			[[], [], []]
		)
		'empty object' |> t.eq(
			['{}', '{\n}', '{    }'] |> std.map(p)
			[{}, {}, {}]
		)
		'ordinary list' |> t.eq(
			p('[1, "two", 30]')
			[1, 'two', 30]
		)
		'nested list' |> t.eq(
			p('[1, [2, [3]], [4, "five"]]')
			[1, [2, [3]], [4, 'five']]
		)
		'ordinary object' |> t.eq(
			p('{"a": "bee", "c": [10, 20]}')
			{ a: 'bee', c: [10, 20] }
		)
		'nested object' |> t.eq(
			p('{"a": {"Key": "Value"}}')
			{ a: { Key: 'Value' } }
		)

		// malformed JSONs that should not parse
	}

	// round-trip tests
	{
		{
			serialize: ser
			parse: par
		} := json

		targets := [
			?
			100
			'something \n\t\r wild'
			{ a: 'b', c: -4.251, d: [10, 20, ?] }
			[
				'a', true
				{ c: 'd', e: 32.14 }
				['f', {}, (), -42]
			]
			{
				ser: 'de'
				'\\': 3
				'esc\\': 'back\\slash'
				apple: 'dessert'
				x: ['train', false, 'car', true, { x: ['y', 'z'] }]
				32: 'thirty-two'
				nothing: ?
			}
		]

		targets |> std.each(fn(target) {
			fmt.format('2x round-trip {{ 0 }}...', string(target) |> std.take(20)) |> t.eq(
				target |> ser() |> par() |> ser() |> par()
				target
			)
		})
	}
}

