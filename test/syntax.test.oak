std := import('std')
{
	shebang?: shebang?
	renderPos: renderPos
	renderToken: renderToken
	tokenize: tokenize
	parse: parse
	print: print
} := import('syntax')

fn run(t) {
	// utilities
	{
		'shebang? recognizes shebang file' |> t.assert(
			shebang?('#!/usr/bin/env oak\nprint(1 + 2)')
		)
		'shebang? reports false for non-shebang file' |> t.eq(
			shebang?('// just a comment\nprint(1 + 2)')
			false
		)

		'renderPos [0:0]' |> t.eq(renderPos([10, 0, 0]), '[0:0]')
		'renderPos [line:col]' |> t.eq(renderPos([1, 2, 3]), '[2:3]')

		'renderToken arbitrary token without val' |> t.eq(
			renderToken({ type: :testKeyword, pos: [1, 2, 3], val: ? })
			'testKeyword [2:3]'
		)
		'renderToken arbitrary token with val' |> t.eq(
			renderToken({ type: :testKeyword, pos: [1, 2, 3], val: 'xyz' })
			'testKeyword(xyz) [2:3]'
		)
	}

	// tokenizer tests
	{
		fn Token(type, pos, val) {
			type: type
			val: val
			pos: pos
		}

		'empty program' |> t.eq(
			tokenize('')
			[]
		)

		'comment program' |> t.eq(
			tokenize('// this is a comment\n//second comment')
			[
				Token(:comment, [0, 1, 1], ' this is a comment')
				Token(:newline, [20, 1, 21])
				Token(:comment, [21, 2, 1], 'second comment')
			]
		)

		'whitespace-only program' |> t.eq(
			tokenize('\t   \n')
			[
				Token(:newline, [4, 1, 5])
			]
		)

		'null and empty' |> t.eq(
			tokenize('?, _, __')
			[
				Token(:qmark, [0, 1, 1])
				Token(:comma, [1, 1, 2])
				Token(:underscore, [3, 1, 4])
				Token(:comma, [4, 1, 5])
				Token(:identifier, [6, 1, 7], '__')
				Token(:comma, [8, 1, 9])
			]
		)

		'number literals' |> t.eq(
			tokenize(' 0 1 2.34 -0.567')
			[
				Token(:numberLiteral, [1, 1, 2], '0')
				Token(:numberLiteral, [3, 1, 4], '1')
				Token(:numberLiteral, [5, 1, 6], '2.34')
				Token(:minus, [10, 1, 11])
				Token(:numberLiteral, [11, 1, 12], '0.567')
				Token(:comma, [16, 1, 17])
			]
		)

		'string literals' |> t.eq(
			tokenize('\'hello\' \'hi\' \'what\\\'s up\\n\\t\' ')
			[
				Token(:stringLiteral, [0, 1, 1], 'hello')
				Token(:stringLiteral, [8, 1, 9], 'hi')
				Token(:stringLiteral, [13, 1, 14], 'what\\\'s up\\n\\t')
				Token(:comma, [30, 1, 31])
			]
		)

		'atom literals' |> t.eq(
			tokenize(':whatever :not_found_404')
			[
				Token(:colon, [0, 1, 1])
				Token(:identifier, [1, 1, 2], 'whatever')
				Token(:colon, [10, 1, 11])
				Token(:identifier, [11, 1, 12], 'not_found_404')
				Token(:comma, [24, 1, 25])
			]
		)

		'atom literals matching keywords' |> t.eq(
			tokenize(':if, :fn, :with, :true, :false')
			[
				Token(:colon, [0, 1, 1])
				Token(:ifKeyword, [1, 1, 2])
				Token(:comma, [3, 1, 4])
				Token(:colon, [5, 1, 6])
				Token(:fnKeyword, [6, 1, 7])
				Token(:comma, [8, 1, 9])
				Token(:colon, [10, 1, 11])
				Token(:withKeyword, [11, 1, 12])
				Token(:comma, [15, 1, 16])
				Token(:colon, [17, 1, 18])
				Token(:trueLiteral, [18, 1, 19])
				Token(:comma, [22, 1, 23])
				Token(:colon, [24, 1, 25])
				Token(:falseLiteral, [25, 1, 26])
				Token(:comma, [30, 1, 31])
			]
		)

		'identifiers' |> t.eq(
			tokenize('hi _hello? whats_up__ nothing! ')
			[
				Token(:identifier, [0, 1, 1], 'hi')
				Token(:identifier, [3, 1, 4], '_hello?')
				Token(:identifier, [11, 1, 12], 'whats_up__')
				Token(:identifier, [22, 1, 23], 'nothing!')
				Token(:comma, [31, 1, 32])
			]
		)

		'simple binary expression' |> t.eq(
			tokenize('total := 1 + 2 * 4')
			[
				Token(:identifier, [0, 1, 1], 'total')
				Token(:assign, [6, 1, 7])
				Token(:numberLiteral, [9, 1, 10], '1')
				Token(:plus, [11, 1, 12])
				Token(:numberLiteral, [13, 1, 14], '2')
				Token(:times, [15, 1, 16])
				Token(:numberLiteral, [17, 1, 18], '4')
				Token(:comma, [18, 1, 19])
			]
		)

		'hanging binary expression' |> t.eq(
			tokenize('1 + 2 +\n3 *\n4')
			[
				Token(:numberLiteral, [0, 1, 1], '1')
				Token(:plus, [2, 1, 3])
				Token(:numberLiteral, [4, 1, 5], '2')
				Token(:plus, [6, 1, 7])
				Token(:newline, [7, 1, 8])
				Token(:numberLiteral, [8, 2, 1], '3')
				Token(:times, [10, 2, 3])
				Token(:newline, [11, 2, 4])
				Token(:numberLiteral, [12, 3, 1], '4')
				Token(:comma, [13, 3, 2])
			]
		)

		'delimiters' |> t.eq(
			tokenize('( [{ hi: :hello }] ) + (2)')
			[
				Token(:leftParen, [0, 1, 1])
				Token(:leftBracket, [2, 1, 3])
				Token(:leftBrace, [3, 1, 4])
				Token(:identifier, [5, 1, 6], 'hi')
				Token(:colon, [7, 1, 8])
				Token(:colon, [9, 1, 10])
				Token(:identifier, [10, 1, 11], 'hello')
				Token(:comma, [16, 1, 17])
				Token(:rightBrace, [16, 1, 17])
				Token(:comma, [17, 1, 18])
				Token(:rightBracket, [17, 1, 18])
				Token(:comma, [19, 1, 20])
				Token(:rightParen, [19, 1, 20])
				Token(:plus, [21, 1, 22])
				Token(:leftParen, [23, 1, 24])
				Token(:numberLiteral, [24, 1, 25], '2')
				Token(:comma, [25, 1, 26])
				Token(:rightParen, [25, 1, 26])
				Token(:comma, [26, 1, 27])
			]
		)

		'list literal' |> t.eq(
			tokenize('[1, a, :first]')
			[
				Token(:leftBracket, [0, 1, 1])
				Token(:numberLiteral, [1, 1, 2], '1')
				Token(:comma, [2, 1, 3])
				Token(:identifier, [4, 1, 5], 'a')
				Token(:comma, [5, 1, 6])
				Token(:colon, [7, 1, 8])
				Token(:identifier, [8, 1, 9], 'first')
				Token(:comma, [13, 1, 14])
				Token(:rightBracket, [13, 1, 14])
				Token(:comma, [14, 1, 15])
			]
		)

		'list literal with newlines' |> t.eq(
			tokenize('[\n\t1,\n\ta,\n\t:first\n]')
			[
				Token(:leftBracket, [0, 1, 1])
				Token(:newline, [1, 1, 2])
				Token(:numberLiteral, [3, 2, 2], '1')
				Token(:comma, [4, 2, 3])
				Token(:newline, [5, 2, 4])
				Token(:identifier, [7, 3, 2], 'a')
				Token(:comma, [8, 3, 3])
				Token(:newline, [9, 3, 4])
				Token(:colon, [11, 4, 2])
				Token(:identifier, [12, 4, 3], 'first')
				Token(:comma, [17, 4, 1])
				Token(:newline, [17, 4, 1])
				Token(:rightBracket, [18, 5, 1])
				Token(:comma, [19, 5, 2])
			]
		)

		'empty object' |> t.eq(
			tokenize('{}')
			[
				Token(:leftBrace, [0, 1, 1])
				Token(:rightBrace, [1, 1, 2])
				Token(:comma, [2, 1, 3])
			]
		)

		'object literal' |> t.eq(
			tokenize('{a: :bee}')
			[
				Token(:leftBrace, [0, 1, 1])
				Token(:identifier, [1, 1, 2], 'a')
				Token(:colon, [2, 1, 3])
				Token(:colon, [4, 1, 5])
				Token(:identifier, [5, 1, 6], 'bee')
				Token(:comma, [8, 1, 9])
				Token(:rightBrace, [8, 1, 9])
				Token(:comma, [9, 1, 10])
			]
		)

		'object literal with newlines' |> t.eq(
			tokenize('{\n1: 2\n3: ?\n}')
			[
				Token(:leftBrace, [0, 1, 1])
				Token(:newline, [1, 1, 2])
				Token(:numberLiteral, [2, 2, 1], '1')
				Token(:colon, [3, 2, 2])
				Token(:numberLiteral, [5, 2, 4], '2')
				Token(:comma, [6, 2, 1])
				Token(:newline, [6, 2, 1])
				Token(:numberLiteral, [7, 3, 1], '3')
				Token(:colon, [8, 3, 2])
				Token(:qmark, [10, 3, 4])
				Token(:comma, [11, 3, 5])
				Token(:newline, [11, 3, 5])
				Token(:rightBrace, [12, 4, 1])
				Token(:comma, [13, 4, 2])
			]
		)

		'basic function' |> t.eq(
			tokenize('fn a(b, c) if a |> c {\nd -> e\n}')
			[
				Token(:fnKeyword, [0, 1, 1])
				Token(:identifier, [3, 1, 4], 'a')
				Token(:leftParen, [4, 1, 5])
				Token(:identifier, [5, 1, 6], 'b')
				Token(:comma, [6, 1, 7])
				Token(:identifier, [8, 1, 9], 'c')
				Token(:comma, [9, 1, 10])
				Token(:rightParen, [9, 1, 10])
				Token(:ifKeyword, [11, 1, 12])
				Token(:identifier, [14, 1, 15], 'a')
				Token(:pipeArrow, [16, 1, 17])
				Token(:identifier, [19, 1, 20], 'c')
				Token(:leftBrace, [21, 1, 22])
				Token(:newline, [22, 1, 23])
				Token(:identifier, [23, 2, 1], 'd')
				Token(:branchArrow, [25, 2, 3])
				Token(:identifier, [28, 2, 6], 'e')
				Token(:comma, [29, 2, 1])
				Token(:newline, [29, 2, 1])
				Token(:rightBrace, [30, 3, 1])
				Token(:comma, [31, 3, 2])
			]
		)

		'variadic function' |> t.eq(
			tokenize('fn f(x, y...) ?, f(1, a...)')
			[
				Token(:fnKeyword, [0, 1, 1])
				Token(:identifier, [3, 1, 4], 'f')
				Token(:leftParen, [4, 1, 5])
				Token(:identifier, [5, 1, 6], 'x')
				Token(:comma, [6, 1, 7])
				Token(:identifier, [8, 1, 9], 'y')
				Token(:ellipsis, [9, 1, 10])
				Token(:comma, [12, 1, 13])
				Token(:rightParen, [12, 1, 13])
				Token(:qmark, [14, 1, 15])
				Token(:comma, [15, 1, 16])
				Token(:identifier, [17, 1, 18], 'f')
				Token(:leftParen, [18, 1, 19])
				Token(:numberLiteral, [19, 1, 20], '1')
				Token(:comma, [20, 1, 21])
				Token(:identifier, [22, 1, 23], 'a')
				Token(:ellipsis, [23, 1, 24])
				Token(:comma, [26, 1, 27])
				Token(:rightParen, [26, 1, 27])
				Token(:comma, [27, 1, 28])
			]
		)

		'with expression' |> t.eq(
			tokenize('with readFile(path) fn(file) {\n\t// do thing\n}')
			[
				Token(:withKeyword, [0, 1, 1])
				Token(:identifier, [5, 1, 6], 'readFile')
				Token(:leftParen, [13, 1, 14])
				Token(:identifier, [14, 1, 15], 'path')
				Token(:comma, [18, 1, 19])
				Token(:rightParen, [18, 1, 19])
				Token(:fnKeyword, [20, 1, 21])
				Token(:leftParen, [22, 1, 23])
				Token(:identifier, [23, 1, 24], 'file')
				Token(:comma, [27, 1, 28])
				Token(:rightParen, [27, 1, 28])
				Token(:leftBrace, [29, 1, 30])
				Token(:newline, [30, 1, 31])
				Token(:comment, [32, 2, 2], ' do thing')
				Token(:newline, [43, 2, 13])
				Token(:rightBrace, [44, 3, 1])
				Token(:comma, [45, 3, 2])
			]
		)
	}

	// parser tests
	{
		// for positions
		fn at(offset, line, col) {
			type: _
			val: _
			pos: [offset, line, col]
		}

		'empty program' |> t.eq(
			parse('')
			[]
		)

		'comment program' |> t.eq(
			parse('// this is a comment\n//second comment')
			[]
		)

		'whitespace-only program' |> t.eq(
			parse('   \n')
			[]
		)

		'bool literals' |> t.eq(
			parse('true, false')
			[
				{ type: :bool, val: true, tok: at(0, 1, 1) }
				{ type: :bool, val: false, tok: at(6, 1, 7) }
			]
		)

		'number literals' |> t.eq(
			parse('12, 24.5, 0')
			[
				{ type: :int, val: 12, tok: at(0, 1, 1) }
				{ type: :float, val: 24.5, tok: at(4, 1, 5) }
				{ type: :int, val: 0, tok: at(10, 1, 11) }
			]
		)

		'number with two decimals' |> t.eq(
			parse('2.3.4.5.6')
			[{
				type: :propertyAccess
				tok: at(7, 1, 8)
				left: {
					type: :propertyAccess
					tok: at(3, 1, 4)
					left: { type: :float, val: 2.3, tok: at(0, 1, 1) }
					right: { type: :float, val: 4.5, tok: at(4, 1, 5) }
				}
				right: {
					type: :int
					tok: at(8, 1, 9)
					val: 6
				}
			}]
		)

		'string literals' |> t.eq(
			parse('\'hello\', \'hi\', \'what\\\'s up\\n\\t\' ')
			[
				{ type: :string, val: 'hello', tok: at(0, 1, 1) }
				{ type: :string, val: 'hi', tok: at(9, 1, 10) }
				{ type: :string, val: 'what\'s up\n\t', tok: at(15, 1, 16) }
			]
		)

		'atom literals' |> t.eq(
			parse(':whatever, :not_found_404')
			[
				{ type: :atom, val: 'whatever', tok: at(0, 1, 1) }
				{ type: :atom, val: 'not_found_404', tok: at(11, 1, 12) }
			]
		)

		'atom literals matching keywords' |> t.eq(
			parse(':if, :fn, :with, :true, :false')
			[
				{ type: :atom, val: 'if', tok: at(0, 1, 1) }
				{ type: :atom, val: 'fn', tok: at(5, 1, 6) }
				{ type: :atom, val: 'with', tok: at(10, 1, 11) }
				{ type: :atom, val: 'true', tok: at(17, 1, 18) }
				{ type: :atom, val: 'false', tok: at(24, 1, 25) }
			]
		)

		'identifiers' |> t.eq(
			parse('hi, _hello?, whats_up__, nothing! ')
			[
				{ type: :identifier, val: 'hi', tok: at(0, 1, 1) }
				{ type: :identifier, val: '_hello?', tok: at(4, 1, 5) }
				{ type: :identifier, val: 'whats_up__', tok: at(13, 1, 14) }
				{ type: :identifier, val: 'nothing!', tok: at(25, 1, 26) }
			]
		)

		'simple binary expressions' |> t.eq(
			parse('10 + 20')
			[{
				type: :binary
				op: :plus
				left: { type: :int, val: 10, tok: at(0, 1, 1) }
				right: { type: :int, val: 20, tok: at(5, 1, 6) }
				tok: at(3, 1, 4)
			}]
		)

		'simple assignment' |> t.eq(
			parse('x <- :hi')
			[{
				type: :assignment
				tok: at(2, 1, 3)
				local?: false
				left: { type: :identifier, val: 'x', tok: at(0, 1, 1) }
				right: { type: :atom, val: 'hi', tok: at(5, 1, 6) }
			}]
		)

		'compound binary expressions' |> t.eq(
			parse('total := 1 + 2 * 3 - 4')
			[{
				type: :assignment
				tok: at(6, 1, 7)
				local?: true
				left: { type: :identifier, val: 'total', tok: at(0, 1, 1) }
				right: {
					type: :binary
					tok: at(19, 1, 20)
					op: :minus
					left: {
						type: :binary
						tok: at(11, 1, 12)
						op: :plus
						left: {
							type: :int
							tok: at(9, 1, 10)
							val: 1
						}
						right: {
							type: :binary
							tok: at(15, 1, 16)
							op: :times
							left: {
								type: :int
								tok: at(13, 1, 14)
								val: 2
							}
							right: {
								type: :int
								tok: at(17, 1, 18)
								val: 3
							}
						}
					}
					right: {
						type: :int
						tok: at(21, 1, 22)
						val: 4
					}
				}
			}]
		)

		'list literals' |> t.eq(
			parse('[], [1, [2, 3]]')
			[{
				type: :list
				tok: at(0, 1, 1)
				elems: []
			}, {
				type: :list
				tok: at(4, 1, 5)
				elems: [{
					type: :int
					tok: at(5, 1, 6)
					val: 1
				}, {
					type: :list
					tok: at(8, 1, 9)
					elems: [{
						type: :int
						tok: at(9, 1, 10)
						val: 2
					}, {
						type: :int
						tok: at(12, 1, 13)
						val: 3
					}]
				}]
			}]
		)

		'object literals' |> t.eq(
			parse('{}, {a: :ay, b + [c]: {d: \'dee\'}}')
			[{
				type: :object
				tok: at(0, 1, 1)
				entries: []
			}, {
				type: :object
				tok: at(4, 1, 5)
				entries: [{
					key: { type: :identifier, tok: at(5, 1, 6), val: 'a' }
					val: { type: :atom, tok: at(8, 1, 9), val: 'ay' }
				}, {
					key: {
						type: :binary
						tok: at(15, 1, 16)
						op: :plus
						left: { type: :identifier, tok: at(13, 1, 14), val: 'b' }
						right: {
							type: :list
							tok: at(17, 1, 18)
							elems: [{
								type: :identifier
								tok: at(18, 1, 19)
								val: 'c'
							}]
						}
					}
					val: {
						type: :object
						tok: at(22, 1, 23)
						entries: [{
							key: { type: :identifier, tok: at(23, 1, 24), val: 'd' }
							val: { type: :string, tok: at(26, 1, 27), val: 'dee' }
						}]
					}
				}]
			}]
		)

		'empty fn body edge case' |> t.eq(
			parse('fn {}\nfn named(){  }')
			[{
				type: :function
				tok: at(0, 1, 1)
				name: ''
				args: []
				restArg: ''
				body: { type: :block, tok: at(3, 1, 4), exprs: [] }
			}, {
				type: :function
				tok: at(6, 2, 1)
				name: 'named'
				args: []
				restArg: ''
				body: { type: :block, tok: at(16, 2, 11), exprs: [] }
			}]
		)

		'fn def and call' |> t.eq(
			parse('fn get3 { x := 4, 3 }\nget3(1, 2, []...)')
			[{
				type: :function
				tok: at(0, 1, 1)
				name: 'get3'
				args: []
				restArg: ''
				body: {
					type: :block
					tok: at(8, 1, 9)
					exprs: [{
						type: :assignment
						tok: at(12, 1, 13)
						local?: true
						left: { type: :identifier, tok: at(10, 1, 11), val: 'x' }
						right: { type: :int, tok: at(15, 1, 16), val: 4 }
					}, {
						type: :int
						tok: at(18, 1, 19)
						val: 3
					}]
				}
			}, {
				type: :fnCall
				tok: at(26, 2, 5)
				function: {
					type: :identifier
					tok: at(22, 2, 1)
					val: 'get3'
				}
				args: [{
					type: :int
					tok: at(27, 2, 6)
					val: 1
				}, {
					type: :int
					tok: at(30, 2, 9)
					val: 2
				}]
				restArg: {
					type: :list
					tok: at(33, 2, 12)
					elems: []
				}
			}]
		)

		'if expression' |> t.eq(
			parse('if 1 + 2 {\n\t\t\t\t3 + 4 -> 5\n\t\t\t\tf(), g() -> 10\n\t\t\t\t_ -> ?\n\t\t\t}')
			[{
				type: :ifExpr
				tok: at(0, 1, 1)
				cond: {
					type: :binary
					tok: at(5, 1, 6)
					op: :plus
					left: {
						type: :int
						tok: at(3, 1, 4)
						val: 1
					}
					right: {
						type: :int
						tok: at(7, 1, 8)
						val: 2
					}
				}
				branches: [
					{
						type: :ifBranch
						target: {
							type: :binary
							tok: at(17, 2, 7)
							op: :plus
							left: {
								type: :int
								tok: at(15, 2, 5)
								val: 3
							}
							right: {
								type: :int
								tok: at(19, 2, 9)
								val: 4
							}
						}
						body: {
							type: :int
							tok: at(24, 2, 14)
							val: 5
						}
					}
					{
						type: :ifBranch
						target: {
							type: :fnCall
							tok: at(31, 3, 6)
							function: {
								type: :identifier
								tok: at(30, 3, 5)
								val: 'f'
							}
							args: []
							restArg: ?
						}
						body: {
							type: :int
							tok: at(42, 3, 17)
							val: 10
						}
					}
					{
						type: :ifBranch
						target: {
							type: :fnCall
							tok: at(36, 3, 11)
							function: {
								type: :identifier
								tok: at(35, 3, 10)
								val: 'g'
							}
							args: []
							restArg: ?
						}
						body: {
							type: :int
							tok: at(42, 3, 17)
							val: 10
						}
					}
					{
						type: :ifBranch
						target: {
							type: :empty
							tok: at(49, 4, 5)
						}
						body: {
							type: :null
							tok: at(54, 4, 10)
						}
					}
				]
			}]
		)

		'if expression with implicit cond' |> t.eq(
			parse('if {\n\t\t\t\t? -> 3\n\t\t\t}')
			[{
				type: :ifExpr
				tok: at(0, 1, 1)
				cond: {
					type: :bool
					tok: at(0, 1, 1)
					val: true
				}
				branches: [{
					type: :ifBranch
					target: {
						type: :null
						tok: at(9, 2, 5)
					}
					body: {
						type: :int
						tok: at(14, 2, 10)
						val: 3
					}
				}]
			}]
		)

		'if expression with multi-target branches' |> t.eq(
			parse('if letter() { a, b, c -> 3, d -> 4, _ -> 5 }')
			[{
				type: :ifExpr
				tok: at(0, 1, 1)
				cond: {
					type: :fnCall
					tok: at(9, 1, 10)
					function: {
						type: :identifier
						tok: at(3, 1, 4)
						val: 'letter'
					}
					args: []
					restArg: ?
				}
				branches: [{
					type: :ifBranch
					target: {
						type: :identifier
						tok: at(14, 1, 15)
						val: 'a'
					}
					body: {
						type: :int
						tok: at(25, 1, 26)
						val: 3
					}
				}, {
					type: :ifBranch
					target: {
						type: :identifier
						tok: at(17, 1, 18)
						val: 'b'
					}
					body: {
						type: :int
						tok: at(25, 1, 26)
						val: 3
					}
				}, {
					type: :ifBranch
					target: {
						type: :identifier
						tok: at(20, 1, 21)
						val: 'c'
					}
					body: {
						type: :int
						tok: at(25, 1, 26)
						val: 3
					}
				}, {
					type: :ifBranch
					target: {
						type: :identifier
						tok: at(28, 1, 29)
						val: 'd'
					}
					body: {
						type: :int
						tok: at(33, 1, 34)
						val: 4
					}
				}, {
					type: :ifBranch
					target: {
						type: :empty
						tok: at(36, 1, 37)
					}
					body: {
						type: :int
						tok: at(41, 1, 42)
						val: 5
					}
				}]
			}]
		)

		'if expression shorthand for true-valued target' |> t.eq(
			parse('if a + b = c -> body')
			[{
				type: :ifExpr
				tok: at(0, 1, 1)
				cond: {
					type: :binary
					tok: at(9, 1, 10)
					op: :eq
					left: {
						type: :binary
						tok: at(5, 1, 6)
						op: :plus
						left: {
							type: :identifier
							tok: at(3, 1, 4)
							val: 'a'
						}
						right: {
							type: :identifier
							tok: at(7, 1, 8)
							val: 'b'
						}
					}
					right: {
						type: :identifier
						tok: at(11, 1, 12)
						val: 'c'
					}
				}
				branches: [{
					type: :ifBranch
					target: {
						type: :bool
						tok: at(13, 1, 14)
						val: true
					}
					body: {
						type: :identifier
						tok: at(16, 1, 17)
						val: 'body'
					}
				}]
			}]
		)

		'if expression shorthand for true-valued target with block body' |> t.eq(
			parse('if cond -> {\n\tbody1()\n\tbody2\n}')
			[{
				type: :ifExpr
				tok: at(0, 1, 1)
				cond: {
					type: :identifier
					tok: at(3, 1, 4)
					val: 'cond'
				}
				branches: [{
					type: :ifBranch
					target: {
						type: :bool
						tok: at(8, 1, 9)
						val: true
					}
					body: {
						type: :block
						tok: at(11, 1, 12)
						exprs: [{
							type: :fnCall
							tok: at(19, 2, 7)
							function: {
								tok: at(14, 2, 2)
								type: :identifier
								val: 'body1'
							}
							args: []
							restArg: ?
						}
						{
							type: :identifier
							tok: at(23, 3, 2)
							val: 'body2'
						}]
					}
				}]
			}]
		)

		'empty identifier in fn def' |> t.eq(
			parse('fn(_, i) {}')
			[{
				type: :function
				tok: at(0, 1, 1)
				name: ''
				args: ['_', 'i']
				restArg: ''
				body: { type: :block, tok: at(9, 1, 10), exprs: [] }
			}]
		)

		'rest args in fn def' |> t.eq(
			parse('fn(x, y...) {}')
			[{
				type: :function
				tok: at(0, 1, 1)
				name: ''
				args: ['x']
				restArg: 'y'
				body: { type: :block, tok: at(12, 1, 13), exprs: [] }
			}]
		)

		'with expression' |> t.eq(
			parse('with f(1, 2) 100')
			[{
				type: :fnCall
				tok: at(6, 1, 7)
				function: { type: :identifier, tok: at(5, 1, 6), val: 'f' }
				args: [
					{ type: :int, tok: at(7, 1, 8), val: 1 }
					{ type: :int, tok: at(10, 1, 11), val: 2 }
					{ type: :int, tok: at(13, 1, 14), val: 100 }
				]
				restArg: ?
			}]
		)

		'pipe arrow operator' |> t.eq(
			parse('3 |> double() |> with add() 10')
			[{
				type: :fnCall
				tok: at(25, 1, 26)
				function: {
					type: :identifier
					tok: at(22, 1, 23)
					val: 'add'
				}
				args: [
					{
						type: :fnCall
						tok: at(11, 1, 12)
						function: {
							type: :identifier
							tok: at(5, 1, 6)
							val: 'double'
						}
						args: [{
							type: :int
							tok: at(0, 1, 1)
							val: 3
						}]
						restArg: ?
					}
					{ type: :int, tok: at(28, 1, 29), val: 10 }
				]
				restArg: ?
			}]
		)

		// string escape tests
		[
			// quoted string literal
			['\'a\\\'b\'', 'a' + char(39) + 'b']
			// quoting, escape, and overflow
			['\'\\', '']
			['\'\\\'', '\'']
			['\'\\x\'', 'x']
			['\'\\x1\'', 'x1']
			['\'\\x1g\'', 'x1g']
			// hex escapes
			['\'a\\x!\'', 'ax!']
			['\'a\\x1!\'', 'ax1!']
			['\'a\\x0a!\'', 'a\n!']
			['\'a\\x0A!\'', 'a\n!']
			['\'a\\x1z!\'', 'ax1z!']
			// out of ascii range
			['\'\\x98\'', char(std.fromHex('98'))]
		] |> with std.each() fn(spec) {
			[prog, val] := spec
			t.eq(
				'parses string literal: ' + prog
				parse(prog)
				[{ type: :string, val: val, tok: at(0, 1, 1) }]
			)
		}

		// parser robustness tests
		[
			'('
			'['
			'{'
			')'
			']'
			'}'
			'!'
			':'
			':_'
			':?'
			'{+}'
			'+100'
			'1 +'
			'1 + (s'
			'1 + {s'
			'1 + [s'
			'first second'
			'{ a:'
			'{ a: }'
			'100.fn'
			'x.'
			'fn'
			'fn name'
			'fn ('
			'fn (a'
			'fn (a, b)'
			'if x'
			'if {'
			'if { 100'
			'if { 100 }'
			'if { 100 ->'
			'if { 100 -> }'
			'if -> body'
			'if cond ->'
			'with'
			'with a'
			'with with'
			'with run(a, b)'
			'with fn(a) b + c'
			'a + b(c'
			'zip(xs, \'ys)'
			'sum(zip(xs ys))'
			'sum(zip(xs, \'ys))'
			'with server.route(\'/hello/:name\''
		] |> with std.each() fn(prog) t.eq(
			'parse does not crash: ' + prog
			parse(prog)
			{ type: :error, error: _, pos: _ }
		)
	}

	// printer integration tests
	{
		'empty program' |> t.eq(
			print('')
			''
		)
		'comment program' |> t.eq(
			print('// this is a comment  \n// \n//    second comment')
			'// this is a comment\n//\n//    second comment'
		)
		'whitespace-only program preserves newlines' |> t.eq(
			print('   \n\t\n')
			'\n\n'
		)
		'number literals' |> t.eq(
			print(' 0, 1\n2.34, -0.5670,')
			'0, 1\n2.34, -0.5670'
		)
		'string literals' |> t.eq(
			print('\'hello\nworld\',\'hi\',\n\'what\\\'s up\\n\\t\' ')
			'\'hello\nworld\', \'hi\'\n\'what\\\'s up\\n\\t\''
		)
		'identifier' |> t.eq(
			print('hi, _hello?, whats_up__, nothing! ')
			'hi, _hello?, whats_up__, nothing!'
		)
		'atoms' |> t.eq(
			print(':whatever, :not_found_404')
			':whatever, :not_found_404'
		)
		'atoms like keywords' |> t.eq(
			print(':_?,:if, : fn,: with, :true, :  false')
			':_?, :if, :fn, :with, :true, :false'
		)
		'atoms in blocks' |> t.eq(
			print('(:hi), {:hi}')
			'(:hi), { :hi }'
		)
		'simple unary expression' |> t.eq(
			print('!!a+--b')
			'!!a + --b'
		)
		'simple binary expression' |> t.eq(
			print('total:=one ( )+2 *  \t4   ')
			'total := one() + 2 * 4'
		)
		'- (:minus) used as infix op' |> t.eq(
			print('( 1-2 )-3+-2')
			'(1 - 2) - 3 + -2'
		)
		'delimiters' |> t.eq(
			print('( [{hi: :hello}      ] )+(    2 )')
			'([{ hi: :hello }]) + (2)'
		)
		'list literal' |> t.eq(
			print('[   1,a,       :first]')
			'[1, a, :first]'
		)
		'list literal with newlines' |> t.eq(
			print('[\n\t1,\n\ta,\n\t:first\n]')
			'[\n\t1\n\ta\n\t:first\n]'
		)
		'empty object' |> t.eq(
			print('{}')
			'{}'
		)
		'object literal' |> t.eq(
			print(' {   1:2,three: \'four\' , five:[ six\t],}')
			'{ 1: 2, three: \'four\', five: [six] }'
		)
		'object literal with newlines' |> t.eq(
			print('{   \n1:2,\n  three:\'four\'\nfive:six,\nseven::eight\n}')
			'{\n\t1: 2\n\tthree: \'four\'\n\tfive: six\n\tseven: :eight\n}'
		)
		'complex object literal' |> t.eq(
			print('{\nlist: [\n1,2\nthree,\n],\nobj: {__key: val? + 3}\n   }')
			'{\n\tlist: [\n\t\t1, 2\n\t\tthree\n\t]\n\tobj: { __key: val? + 3 }\n}'
		)
		'overlapping braces on object literals' |> t.eq(
			print('{\na: b\n}, {\nc: d\n}')
			'{\n\ta: b\n}, {\n\tc: d\n}'
		)

		'basic function' |> t.eq(
			print('fn a(b, c) if a |> c {\nd -> e(_,{f: F}   ,:g,[ h],(i+ j))\n}')
			'fn a(b, c) if a |> c {\n\td -> e(_, { f: F }, :g, [h], (i + j))\n}'
		)
		'variadic function' |> t.eq(
			print('fn f (  x,y ...\t){?}  ,\n\t\tf(1,[ a ] ...)')
			'fn f(x, y...) { ? }\nf(1, [a]...)'
		)
		'with expression' |> t.eq(
			print('with readFile (path)fn(file){\n\t// do thing\n}')
			'with readFile(path) fn(file) {\n\t// do thing\n}'
		)

		// hanging indents
		'simple hanging indent' |> t.eq(
			print('1 + \n2')
			'1 +\n\t2'
		)
		'simple hanging indent with ending newline' |> t.eq(
			print('1 + \n2\n')
			'1 +\n\t2\n'
		)
		'hanging indent inside delimited list' |> t.eq(
			print('[1, 2, 3\n4, 5, 6]')
			'[1, 2, 3\n\t4, 5, 6]'
		)
		'hanging indent inside delimited list after comment' |> t.eq(
			print('[1, 2, 3\/\/ three more\n4, 5, 6]')
			'[1, 2, 3 \/\/ three more\n\t4, 5, 6]'
		)
		'hanging indent inside delimited list inside parens' |> t.eq(
			print('(\n[1, 2, 3\n4, 5, 6]\n)')
			'(\n\t[1, 2, 3\n\t\t4, 5, 6]\n)'
		)
		'hanging indent inside binary expr' |> t.eq(
			print('total := a + \nb+c')
			'total := a +\n\tb + c'
		)
		'hanging indent after pipe arrow' |> t.eq(
			print('result := graph|>\nsearch()  |>\nsort!()')
			'result := graph |>\n\tsearch() |>\n\tsort!()'
		)
		'hanging indent inside binary expr with comment' |> t.eq(
			print('total := a +\/\/ add\nb+c')
			'total := a + \/\/ add\n\tb + c'
		)
		'hanging indent after pipe arrow with comment' |> t.eq(
			print('result := graph|>\nsearch()  |>\/\/ tf-idf\nsort!()')
			'result := graph |>\n\tsearch() |> \/\/ tf-idf\n\tsort!()'
		)
		'hanging indent inside binary expr with multiline comment' |> t.eq(
			print('total := a + \n\/\/ adding b, c\nb+c')
			'total := a +\n\t\/\/ adding b, c\n\tb + c'
		)
		'hanging indent after pipe arrow with multiline comment' |> t.eq(
			print('result := graph|>\n\/\/ search\n\/\/ docs\nsearch()  |>\nsort!()')
			'result := graph |>\n\t\/\/ search\n\t\/\/ docs\n\tsearch() |>\n\tsort!()'
		)
		'multiline hanging indent in delimited list' |> t.eq(
			print('[ 1,2,3\n4, 5,6\n7, 8, 9 \n10 ]')
			'[1, 2, 3\n\t4, 5, 6\n\t7, 8, 9\n\t10]'
		)
		'multiline hanging indent in binary expr' |> t.eq(
			print('total := a + \nb+c*\nd')
			'total := a +\n\tb + c *\n\td'
		)
		'hanging indent after binary expr in delimited list' |> t.eq(
			print('1+[\n2\n]\na')
			'1 + [\n\t2\n]\na'
		)
		'delimited list in hanging indent line' |> t.eq(
			// NOTE: this isn't the desired behavior, but a limitation of the
			// current hanging indent algorithm. It's also not horrible, just
			// "meh". Since it's passable and fixing it will complicate the
			// algorithm significantly, I've chosen to live with it
			// until/unless I find a simpler fix.
			//
			// In essence, this amounts to a "documented bug".
			print('1+\n[\n\t2\n\t]\na')
			'1 +\n\t[\n\t2\n]\na'
		)

		// edge cases and regressions
		'correctly keeps shebang line' |> t.eq(
			print('#!/usr/bin/env oak --flag\n\n2 + 3')
			'#!/usr/bin/env oak --flag\n\n2 + 3'
		)
		'empty block body' |> t.eq(
			print('{{\n\t\t}}')
			'{ {\n} }'
		)
		'indentation collapsing' |> t.eq(
			print('([{\ntype: :key\nval:_\n}])')
			'([{\n\ttype: :key\n\tval: _\n}])'
		)
		'unary operators as fn body' |> t.eq(
			// NOTE: here, the unary - operator in front of n should ideally
			// not be spaced from n. This test doesn't test desired behavior,
			// but instead a documented bug that's a consequence of the high
			// level design of syntax.Printer.
			//
			// Because the token sequence [_, ')', '-'] can be either something
			// like a function definition (below) or a binary expression like
			// (1 + 2) - 3, from a token stream we cannot differentiate one
			// from another case without fully parsing the AST. To keep with
			// the token-based formatter design, we had to assume one, and we
			// currently assume the much more common latter case. I think this
			// is an acceptable tradeoff for a much simpler and faster printing
			// algorithm, but this may change in the future.
			print('fn() !t.passed?, fn neg(n) -n')
			'fn() !t.passed?, fn neg(n) - n'
		)
		'fn body with comments' |> t.eq(
			print('fn {\n\t3 + 4// what is going on?\t\n}')
			'fn {\n\t3 + 4 // what is going on?\n}'
		)
		'unary negation and atoms in if expr' |> t.eq(
			print('if !  try(){:fail->:error}')
			'if !try() { :fail -> :error }'
		)
		'complex expr in if condition' |> t.eq(
			print('if {\nwhatever_\n} { if[23]{30 ->false} -> c }\nif( 2 + 3 ) { }')
			'if {\n\twhatever_\n} { if [23] { 30 -> false } -> c }\nif (2 + 3) {}'
		)
		'just a list in function body' |> t.eq(
			print('fn name[1,2]\t ,fn[ line,col ]')
			'fn name [1, 2], fn [line, col]'
		)
		'common idiom of if directly inside with callback' |> t.eq(
			print('with fs.readFile( path , ) fn (file) if file {\n//body\n}')
			'with fs.readFile(path) fn(file) if file {\n\t//body\n}'
		)
	}
}

