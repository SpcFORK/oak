// oak help

{
	println: println
	default: default
} := import('std')
{
	format: format
} := import('fmt')

Main := 'Oak is an expressive, dynamically typed programming language.

Run an Oak program:
	oak <filename> [arguments]
Start an Oak repl:
	oak

General usage:
	oak <command> [arguments]
where commands are:
	version     print version information
	help        print this message
	repl        start the Oak repl
	eval        evaluate command line args as a program
	pipe        use Oak in a shell pipeline
	cat         print syntax-highlighted Oak source
	doc         generate or view documentation
	fmt         autoformat Oak source code
	test        run tests in *.test.oak files
	pack        build a static binary executable
	build       compile to a single file, optionally to JS
Run oak help <command> for more on each command.
'

Repl := 'Interactive programming environment for Oak

The Oak REPL is also accessible by running `oak repl`. The REPL saves history
to {{0}}/.oak_history.

Special variables
	__          last-evaluated result
'

Eval := 'Evaluate Oak programs from command line arguments

Sometimes, it\'s useful to be able to run short Oak programs without opening a
new file or entering an interactive prompt. It may be performing a quick
numeric calculation, testing an API, or processing some one-off file. For these
occasions, `oak eval` is designed to make it easy to run quick one-line
scripts, including those that may operate on standard input.

Usage
	oak eval [program]

Special variables
	stdin       string representation of the standard input piped into the Oak
	            CLI, if it exists; otherwise, this is not defined

Examples
	oak eval 1 + 2 + 3
		Perform a simple calculation
	oak eval "json.parse(stdin) |> debug.inspect()" < data.json
		Visualize JSON data
	oak eval "fs.listFiles(\'.\') |> std.filter(:dir) |> std.map(:name)"
		List only directories in the working directory
'

Pipe := 'Use Oak to process data in pipelines

Oak is often fit for writing string-processing scripts that may be useful
within a UNIX pipeline. `oak pipe` lets a short Oak program act as a part of a
UNIX pipeline, processing piped input line-by-line and emitting output in a
streaming fashion. Unlike other similar tools, `oak pipe` lets programs harness
the full power of Oak, including concurrent execution, I/O, and the entire Oak
standard library.

This command runs a short program, given as the command line arguments, for
every line of the input stream. If the program returns a non-null (non-?)
value, the return value of the program will be output; otherwise, the line will
be filtered out. `oak pipe` is capable of processing unbuffered, continuously
streaming input.

Usage
	oak pipe [program]

Special variables
	line        string representation of the current line, except any trailing
	            newline characters
	i           line number, starting at 1

Examples
	cat main.oak | oak pipe "\'{{0}}\\t{{1}}\' |> fmt.format(i, line)"
		Print a file with its lines numbered
	oak pipe "if str.startsWith?(line, \'fn \') -> string(i) + \' \' + line" < main.oak
		Print top-level fn declarations in a file with its lines numbered
	tail -f /var/log/access.log | oak pipe "if str.contains?(line, \'/about\') -> line"
		Continuously filter logs to print only those that access "/about"
'

Cat := 'Print syntax-highlighted Oak source files

Oak cat works much like the UNIX utility `cat`, except that `oak cat`
syntax-highlights Oak source code in the process. This is useful when trying to
read Oak programs in the terminal outside of an editor with syntax highlighting
support for Oak, and also supports syntax-highlighting Oak source code to embed
in HTML documents.

Usage
	oak cat [files] [options]

Options
	--html      Format output to be an HTML string with token information
	            embedded as CSS classes, for syntax highlighting on the web.
	--stdin     Read text to highlight from standard input rather than from
	            files passed to the command line arguments.
'

Doc := 'Generate or read documentation for the Oak language and libraries

[[ under construction ]]
'

Fmt := 'Automatically format Oak source files

Usage
	oak fmt [files] [options]

Options
	--fix       Fix any formatting errors in-place, by overwriting any source
	            files with formatting errors on disk. Without this flag set,
	            changed versions of the source files will simply be sent to
	            stdout.
	--diff      Rather than printing formatted source files in their entirely,
	            only print a line diff between the original and formatted
	            files, to show needed changes.
	            Using this option requires a system `diff` to be installed.
	--changes   Rather than formatting source files specified in the command
	            line arguments, check only files with unstaged changes in the
	            local git repository.
	            Using this option requires a system `git` to be installed.
'

Test := 'Run unit tests in *.test.oak files

[[ under construction ]]
'

Pack := 'Package Oak programs into statically distributable binaries

Oak pack will compile and bundle an Oak program, then package it alongside the
Oak interpreter itself so that the single executable binary that results can be
distributed and run as a standalone program.

Usage
	oak pack --entry [src] --output [dest] [options]

Options
	--entry     Entrypoint for the bundle
	--output    Path at which to save the final binary on disk, also -o
	--include   Comma-separated list of modules to include explicitly in the
	            binary, even if the static analyzer cannot find static imports
	            to it from the entrypoint. Use this option to ensure modules
	            loaded dynamically at runtime are bundled.
	--interp    Path to the Oak interpreter that will be packed into the binary
	            to execute the included bundle when it is run. The currently
	            running interpreter is used by default. An alternative --interp
	            may be used to pack an Oak program for a different platform or
	            operating system.
'

Build := 'Compile and bundle Oak programs to Oak or JavaScript

Oak build will compile and bundle an Oak program, potentially with many
dependencies, into a single, self-contained source file. This is useful when
deploying or distributing Oak programs. The compiler can also generate
JavaScript code when using the --web option, rather than Oak code, to output a
bundle that can run on the web and Node.js.

Usage
	oak build --entry [src] --output [dest] [options]

Options
	--entry     Entrypoint for the bundle
	--output    Path at which to save the final bundle on disk, also -o
	--web       Compile the bundle to JavaScript, suitable for running in
	            JavaScript runtimes like web browsers, Node.js, and Deno
	--include   Comma-separated list of modules to include explicitly in the
	            bundle, even if the static analyzer cannot find static imports
	            to it from the entrypoint. Use this option to ensure modules
	            loaded dynamically at runtime are bundled.
'

// main
if title := args().2 {
	? -> Main
	'repl' -> format(Repl, default(env().HOME, '$HOME'))
	'eval' -> Eval
	'pipe' -> Pipe
	'cat' -> Cat
	'doc' -> Doc
	'fmt' -> Fmt
	'test' -> Test
	'pack' -> Pack
	'build' -> Build
	_ -> format('No help message available for "{{ 0 }}"', title)
} |> println()

