// oak help

{
	println: println
	default: default
} := import('std')
{
	format: format
} := import('fmt')

Main := 'Oak is an expressive, dynamically typed programming language.

Run an Oak program:
	oak <filename> [arguments]
Start an Oak repl:
	oak

General usage:
	oak <command> [arguments]
where commands are:
	version     print version information
	help        print this message
	cat         print syntax-highlighted Oak source
	doc         generate or view documentation
	fmt         autoformat Oak source code
	test        run tests in *.test.oak files
	build       compile to a single file, optionally to JS
Run oak help <command> for more on each command.
'

Cat := 'Print syntax-highlighted Oak source files to supported terminals.

Oak cat works much like the UNIX utility `cat`, except that `oak cat`
syntax-highlights Oak source code in the process. This is useful when trying to
read Oak programs in the terminal outside of an editor with syntax highlighting
support for Oak, and also supports syntax-highlighting Oak source code to embed
in HTML documents.

Usage
	oak cat [files] [options]

Options
	--html      Format output to be an HTML string with token information
	            embedded as CSS classes, for syntax highlighting on the web.
'

Repl := 'Oak REPL is an interactive programming environment for Oak.

The REPL saves history to {{0}}/.oak_history.

Special variables
	__          last-evaluated result
'

Doc := 'Generate or read documentation for the Oak language and libraries.

[[ under construction ]]
'

Fmt := 'Automatically format Oak source files.

Usage
	oak fmt [files] [options]

Options
	--fix       Fix any formatting errors in-place, by overwriting any source
	            files with formatting errors on disk. Without this flag set,
	            changed versions of the source files will simply be sent to
	            stdout.
	--diff      Rather than printing formatted source files in their entirely,
	            only print a line diff between the original and formatted
	            files, to show needed changes.
	            Using this option requires a system `diff` to be installed.
	--changes   Rather than formatting source files specified in the command
	            line arguments, check only files with unstaged changes in the
	            local git repository.
	            Using this option requires a system `git` to be installed.
'

Test := 'Run unit tests in *.test.oak files.

[[ under construction ]]
'

Build := 'Compile and bundle Oak programs to Oak or JavaScript.

Oak build will compile and bundle an Oak program, potentially with many
dependencies, into a single, self-contained source file. This is useful when
deploying or distributing Oak programs. The compiler can also generate
JavaScript code when using the --web option, rather than Oak code, to output a
bundle that can run on the web and Node.js.

Usage
	oak build --entry [src] --output [dest] [options]

Options
	--entry     Entrypoint for the bundle (main.oak by default)
	--output    Path at which to save the final bundle on disk, also -o
	--web       Compile the bundle to JavaScript, suitable for running in
	            JavaScript runtimes like web browsers, Node.js, and Deno
	--include   Comma-separated list of modules to include explicitly in the
	            bundle, even if the static analyzer cannot find static imports
	            to it from the entrypoint. Use this option to ensure modules
	            loaded dynamically at runtime are bundled.
'

// main
if title := args().2 {
	? -> Main
	'repl' -> format(Repl, default(env().HOME, '$HOME'))
	'cat' -> Cat
	'doc' -> Doc
	'fmt' -> Fmt
	'test' -> Test
	'build' -> Build
	_ -> format('No help message available for "{{ 0 }}"', title)
} |> println()

