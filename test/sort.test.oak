std := import('std')
str := import('str')
libsort := import('sort')

fn run(t) {
	id := std.identity

	{
		sort!: sort!
		sort: sort
	} := libsort

	// without predicates
	'sort! empty list' |> t.eq(
		sort!([])
		[]
	)
	'sort! small list' |> t.eq(
		sort!([1, 40, 20, -4])
		[-4, 1, 20, 40]
	)
	'sort! list with dups' |> t.eq(
		sort!([1, 40, 20, -4, 20])
		[-4, 1, 20, 20, 40]
	)

	'sort! mutates list' |> t.eq(
		{
			arr := [1, 2, 20, 3, -3]
			sort!(arr)
			arr
		}
		[-3, 1, 2, 3, 20]
	)
	'sort does not mutate list' |> t.eq(
		{
			arr := [1, 2, 20, 3, -3]
			sort(arr)
			arr
		}
		[1, 2, 20, 3, -3]
	)
	'sort! mutates string' |> t.eq(
		{
			arr := 'alphabet soup'
			sort!(arr)
			arr
		}
		' aabehloppstu'
	)
	'sort does not mutate string' |> t.eq(
		{
			arr := 'alphabet soup'
			sort(arr)
			arr
		}
		'alphabet soup'
	)

	// various types
	'sort numbers' |> t.eq(
		sort([11, 0, 13, 7, 2, 3, 5])
		[0, 2, 3, 5, 7, 11, 13]
	)
	'sort strings, incl. empty string' |> t.eq(
		sort(['abc', '', 'xyz', '', 'linus'])
		['', '', 'abc', 'linus', 'xyz']
	)

	// with predicates
	fn o(n) { key: n }
	fn get(o) o.key

	'sort! empty list by predicate' |> t.eq(
		sort!([], get)
		[]
	)
	'sort! small list by predicate' |> t.eq(
		sort!([o(1), o(40), o(20), o(-4)], get)
		[o(-4), o(1), o(20), o(40)]
	)
	'sort! list with dups by predicate' |> t.eq(
		sort!([o(1), o(40), o(20), o(-4), o(20)], get)
		[o(-4), o(1), o(20), o(20), o(40)]
	)

	// non-function keys
	'sort! list by atom predicate' |> t.eq(
		sort!([o(1), o(40), o(20), o(-4)], :key)
		[o(-4), o(1), o(20), o(40)]
	)
	'sort! list by string predicate' |> t.eq(
		sort!([o(1), o(40), o(20), o(-4)], 'key')
		[o(-4), o(1), o(20), o(40)]
	)
	'sort! list by int predicate' |> t.eq(
		sort!([
			[:d, 3, -2]
			[:c, 10, 5]
			[:a, 1, 10]
			[:b, 2, 40]
		], 1)
		[
			[:a, 1, 10]
			[:b, 2, 40]
			[:d, 3, -2]
			[:c, 10, 5]
		]
	)

	// mutation
	'sort! mutates arg by predicate' |> t.eq(
		{
			arr := [o(1), o(2), o(20), o(3), o(-3)]
			sort!(arr, get)
			arr
		}
		[o(-3), o(1), o(2), o(3), o(20)]
	)
	'sort does not mutate arg by predicate' |> t.eq(
		{
			arr := [o(1), o(2), o(20), o(3), o(-3)]
			sort(arr, get)
			arr
		}
		[o(1), o(2), o(20), o(3), o(-3)]
	)

	// sort strings
	'sort! empty string' |> t.eq(
		sort!('')
		''
	)
	'sort! string' |> t.eq(
		sort!('abacadbcab')
		'aaaabbbccd'
	)
	'sort! string by predicate' |> t.eq(
		sort!('AAEEbbcgz', str.lower)
		'AAbbcEEgz'
	)
}
