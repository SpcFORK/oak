// oak fmt -- code formatter

{
	slice: slice
	each: each
	filter: filter
} := import('std')
{
	split: split
	trim: trim
	endsWith?: endsWith?
} := import('str')
{
	readFile: readFile
	writeFile: writeFile
} := import('fs')
{
	printf: printf
} := import('fmt')
cli := import('cli')
syntax := import('syntax')

Cli := cli.parse()

Fix? := Cli.opts.fix != ?
Diff? := Cli.opts.diff != ?

// we don't need a verb, the "verb" will be a file path
Args := if Cli.opts.changes != ? {
	// get list of files from git diff
	true -> {
		evt := exec('git', ['diff', '--name-only'], '')
		if evt.type {
			:error -> {
				printf('[oak fmt] Could not get git diff:\n\t{{ 0 }}', evt.error)
				[]
			}
			_ -> evt.stdout |> trim() |> split('\n') |> with filter() fn(path) path |> endsWith?('.oak')
		}
	}
	_ -> if Cli.verb {
		? -> Cli.args
		_ -> Cli.args << Cli.verb
	}
}

Args |> with each() fn(path) with readFile(path) fn(file) if file {
	? -> printf('[oak fmt] Could not read file {{ 0 }}', path)
	_ -> if {
		Fix? -> with writeFile(path, file |> syntax.print(file)) fn(res) if res {
			? -> printf('[oak fmt] Could not write file {{ 0 }}', path)
			_ -> printf('[oak fmt] Fixed {{ 0 }}', path)
		}
		Diff? -> with exec(
			'diff'
			[path, '-']
			file |> syntax.print()
		) fn(evt) if evt.type {
			:error -> printf('[oak fmt] Error while diffing {{ 0 }}:\n\t{{ 1 }}'
				path, evt.error)
			_ -> print(evt.stdout)
		}
		_ -> file |> syntax.print() |> print()
	}
}

